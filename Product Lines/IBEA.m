% get the result from IBEA optimizer
% modified from Sayyad, Abdel Salam, Tim Menzies, and Hany Ammar. "On the value of user preferences in search-based software engineering: A case study in software product lines." Software engineering (ICSE), 2013 35th international conference on. IEEE, 2013.

clear all

global totalFeatureNum; %set up the total number of features
global totalLeavesNum;  %set up the total number of leaves, which should be determined
global cost;
global usedbefore;
global defects;
global k;
global Problem;
global ObjectiveDimension;
global D;
global objBound_Min;
global objBound_Max;

%% set up the SXFM feature model attributes
totalFeatureNum = 43;
totalLeavesNum = 28;
cost = rand(1,totalFeatureNum)*10+5; % cost between 5.0 and 15.0
usedbefore = randi([0 1],1,totalFeatureNum); %usedbefore is a binary random variable
defects = rand(1,totalFeatureNum) * 10; %defects between 0 and 10
for i = 1:totalFeatureNum
    if usedbefore(i) == 0
        defects(i) = 0;
    end
end

%% set up IBEA parameters
Problem = @SXFM_web_portal; %problems can be generated by another automatic tool written in Java (see SXFM_Parser)
alpha = 100; % population size
beta = 30; % mating pool size
gen_max = 1; % maximum generation
D = totalLeavesNum; % decision space dimension
ObjectiveDimension = 5; % objective(goal) space dimension % all goals should be minimized
k = 1; % fitness scaling factor. Defaultly 1.
objBound_Min = zeros(1,ObjectiveDimension);
objBound_Max = zeros(1,ObjectiveDimension);
objBound_Min(1) = 0; objBound_Max(1) = max(cost);
objBound_Min(2) = 0; objBound_Max(2) = totalFeatureNum;
objBound_Min(3) = 0; objBound_Max(3) = totalFeatureNum;
objBound_Min(4) = 0; objBound_Max(4) = 6;
objBound_Min(5) = 0; objBound_Max(5) = totalFeatureNum;


%% step 1: Initializaiton
P = randi([0 1],alpha,D); % initialize an initial population P of size alpha
PP = randi([0 1],beta,D); % mating pool, randomly initialized. size equals alpha
P = [P;PP]; % append mating pool to initialization pool

obj = zeros(size(P,1),ObjectiveDimension);
for i = 1:size(P,1)
    obj(i,:) = Problem(P(i,:),D);
end

%% step 2: Fitness assignment
F = Fitness(P,obj);

%%
m  = 0;
while (m <= gen_max)
    %% step 3: Environment selection
    while (size(P,1) > alpha)
        xstar = find(F==min(F));
        P = [P(1:xstar-1,:);P(xstar+1:end,:)]; % remove xstar from P
        obj = [obj(1:xstar-1,:);obj(xstar+1:end,:)]; % always let obj follows the change of P
        F = Fitness(P,obj); % recalc fitness
    end
    %% step 5: Mating selection
    % binary tournament selection
    PP = zeros(beta,D);
    for i = 1 : beta
        a = randi(alpha);
        b = randi(alpha);
        if F(a) < F(b)
            a = b;
        end
        PP(i,:) = P(a,:);
    end
    %% step 6: Variation
    
    m = m+1;
end

%% draw the evaluation record
% Map to the unit interval
evoluationRecord = evoluationRecord';
for i = 1 : ObjectiveDimension
    a = max(evoluationRecord(:,i));
    b = min(evoluationRecord(:,i));
    delta = a - b;
    evoluationRecord(:,i) = (evoluationRecord(:,i)-b)/delta;
end
plot(evoluationRecord);figure(gcf);
%%


