% Test entrance
% Compare the performance of Differential evaluation and IBEA w/ same
% initial data set

clear all                                   %Test begin

global totalFeatureNum;                     %set up the total number of features
global totalLeavesNum;                      %set up the total number of leaves, which should be determined
global cost;
global usedbefore;
global defects;
global Problem;
global ori_problem;
global ObjectiveDimension;
global objBound_Min;    
global objBound_Max;

%% Initial the feature attributes.
%ori_Problem = @SXFM_web_portal; %problems can be generated by another automatic tool written in Java (see SXFM_Parser)
ori_problem = @SXFM_FM_test_core;
Problem = @SXFM_FM_adaptor;
totalFeatureNum = 166;
totalLeavesNum = 112;
cost = rand(1,totalFeatureNum)*10+5;         %cost between 5.0 and 15.0
usedbefore = randi([0 1],1,totalFeatureNum); %usedbefore is a binary random variable
defects = rand(1,totalFeatureNum) * 10;      %defects between 0 and 10

for i = 1:totalFeatureNum
    if usedbefore(i) == 0
        defects(i) = 0;
    end
end

ObjectiveDimension = 3;                      % objective(goal) space dimension % all goals should be minimized

%f(1) is rule violations
%f(2) is feature NOT provided
%f(3) is total cost
%f(4) is # number of  feature that were NOT used before
%f(5) is # total number of known defects

objBound_Min = zeros(1,ObjectiveDimension);
objBound_Max = zeros(1,ObjectiveDimension);
objBound_Min(1) = 0;
objBound_Max(1) = 6;
objBound_Min(2) = 0;
objBound_Max(2) = totalFeatureNum;
if ObjectiveDimension >= 3
    objBound_Min(3) = 0;
    objBound_Max(3) = sum(cost);
end
if ObjectiveDimension >= 4
    objBound_Min(4) = 0;
    objBound_Max(4) = totalFeatureNum;
end
if ObjectiveDimension >= 5
    objBound_Min(5) = 0;
    objBound_Max(5) = sum(defects);
end

%% dymanic drawing
figure;
view(-10,10);
pause(2)
%%
%% Execute the testing
generation = 250;
%  cd('DE+NSGAII')
%  [parent1, f1, evoluationRecord1,featureRecord1] = multiObjective(generation);
%  cd('..');
cd('IBEA')
[parent2, f2, evoluationRecord2,featureRecord2] = IBEA(generation);
cd('..');

%%
% subplot(511);
% plot(evoluationRecord1(:,1));figure(gcf);
% subplot(512);
% plot(evoluationRecord1(:,2));figure(gcf);
% subplot(513);
% plot(evoluationRecord1(:,3));figure(gcf);
% subplot(514);
% plot(evoluationRecord1(:,4));figure(gcf);
% subplot(515);
% plot(evoluationRecord1(:,5));figure(gcf);
% %%
% figure();
% subplot(511);
% plot(evoluationRecord2(:,1));figure(gcf);
% subplot(512);
% plot(evoluationRecord2(:,2));figure(gcf);
% subplot(513);
% plot(evoluationRecord2(:,3));figure(gcf);
% subplot(514);
% plot(evoluationRecord2(:,4));figure(gcf);
% subplot(515);
% plot(evoluationRecord2(:,5));figure(gcf);
%%

%% Analysis. Visualization

% score = evoluationRecord;
% for  i = 1: ObjectiveDimension
%     score(:,i) = 1 - (evoluationRecord(:,i)-min(evoluationRecord(:,i)))/(max(evoluationRecord(:,i))-min(evoluationRecord(:,i)));
% end
% score(:,2) = 1 - score(:,2)/totalFeatureNum;
% score(:,3) = 1 - score(:,3)/sum(defects);
% score(:,4) = 1 - score(:,4)/6; %CORRECT CT
% score(:,5) = 1 - score(:,5)/totalFeatureNum;

